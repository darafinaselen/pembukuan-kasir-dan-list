// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PackageType {
  CAR_RENTAL
  TOUR_PACKAGE
}

enum ArmadaStatus {
  READY
  BOOKED
  ON_TRIP
  MAINTENANCE
}

enum DriverStatus {
  READY
  ON_TRIP
  OFF_DUTY
}

enum PaymentStatus {
  UNPAID
  DOWN_PAYMENT
  PAID
}

// 3. Model Database (Master Data - Milik Developer B)

// Modul 2.5: Manajemen Paket Jasa
model Package {
  id                      String        @id @default(uuid())
  package_name            String
  package_type            PackageType
  description             String?
  default_price           Int
  default_duration_hours  Int
  default_overtime_rate   Int
  
  // Relasi: Satu paket bisa digunakan di banyak transaksi
  transactions            Transaction[] 

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("packages")
}

// Modul 3: Manajemen Armada
model Armada {
  id            String       @id @default(uuid())
  license_plate String       @unique
  brand         String
  model         String
  year          Int
  status        ArmadaStatus @default(READY)

  // Relasi: Satu armada bisa ada di banyak transaksi
  transactions  Transaction[]
  // Relasi: Satu armada bisa memiliki banyak catatan pengeluaran (servis, dll)
  expenses      Expense[]     

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("armadas")
}

// Modul 4: Manajemen Sopir
model Driver {
  id           String       @id @default(uuid())
  driver_name  String
  phone_number String
  address      String?
  status       DriverStatus @default(READY)

  // Relasi: Satu sopir bisa ditugaskan di banyak transaksi
  transactions Transaction[] 

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("drivers")
}


// 4. Model Database (Data Transaksional - Milik Developer A)

// Modul 5: Manajemen Pengeluaran Operasional
model Expense {
  id          String   @id @default(uuid())
  date        DateTime @db.Date
  category    String   // Misal: "Servis", "Biaya Kantor", "Gaji Admin"
  description String
  amount      Int

  // Relasi: Pengeluaran ini (opsional) terkait dengan armada mana
  armadaId    String?
  armada      Armada?  @relation(fields: [armadaId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// Modul 2: Manajemen Transaksi
model Transaction {
  id                      String        @id @default(uuid())
  invoice_code            String        @unique
  customer_name           String
  customer_phone          String
  booking_date            DateTime      @db.Date
  checkout_datetime       DateTime      // Waktu mobil keluar
  checkin_datetime        DateTime      // Waktu mobil kembali
  
  // Data Keuangan
  all_in_rate             Int           // Tarif sewa
  overtime_rate_per_hour  Int
  fuel_cost               Int           // Biaya BBM (dicatat per transaksi)
  driver_fee              Int           // Biaya Gaji Sopir (dicatat per transaksi)
  payment_status          PaymentStatus @default(UNPAID)

  // --- Relasi (Foreign Keys) ---

  // Relasi: Transaksi ini (opsional) menggunakan paket apa
  packageId               String?
  package                 Package?      @relation(fields: [packageId], references: [id], onDelete: SetNull)

  // Relasi: Transaksi ini (wajib) menggunakan armada apa
  // onDelete: Restrict -> Mencegah armada dihapus jika masih punya riwayat transaksi
  armadaId                String
  armada                  Armada        @relation(fields: [armadaId], references: [id], onDelete: Restrict)

  // Relasi: Transaksi ini (wajib) menggunakan sopir siapa
  // onDelete: Restrict -> Mencegah sopir dihapus jika masih punya riwayat transaksi
  driverId                String
  driver                  Driver        @relation(fields: [driverId], references: [id], onDelete: Restrict)

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("transactions")
}

enum PackageType {
  CAR_RENTAL
  TOUR_PACKAGE
}

enum ArmadaStatus {
  READY
  BOOKED
  ON_TRIP
  MAINTENANCE
}

enum DriverStatus {
  READY
  ON_TRIP
  OFF_DUTY
}

enum PaymentStatus {
  UNPAID
  DOWN_PAYMENT
  PAID
}

// 3. Model Database (Master Data - Milik Developer B)

// Modul 2.5: Manajemen Paket Jasa
model Package {
  id                      String        @id @default(uuid())
  package_name            String
  package_type            PackageType
  description             String?
  default_price           Int
  default_duration_hours  Int
  default_overtime_rate   Int
  
  // Relasi: Satu paket bisa digunakan di banyak transaksi
  transactions            Transaction[] 

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("packages")
}

// Modul 3: Manajemen Armada
model Armada {
  id            String       @id @default(uuid())
  license_plate String       @unique
  brand         String
  model         String
  year          Int
  status        ArmadaStatus @default(READY)

  // Relasi: Satu armada bisa ada di banyak transaksi
  transactions  Transaction[]
  // Relasi: Satu armada bisa memiliki banyak catatan pengeluaran (servis, dll)
  expenses      Expense[]     

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("armadas")
}

// Modul 4: Manajemen Sopir
model Driver {
  id           String       @id @default(uuid())
  driver_name  String
  phone_number String
  address      String?
  status       DriverStatus @default(READY)

  // Relasi: Satu sopir bisa ditugaskan di banyak transaksi
  transactions Transaction[] 

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("drivers")
}


// 4. Model Database (Data Transaksional - Milik Developer A)

// Modul 5: Manajemen Pengeluaran Operasional
model Expense {
  id          String   @id @default(uuid())
  date        DateTime @db.Date
  category    String   // Misal: "Servis", "Biaya Kantor", "Gaji Admin"
  description String
  amount      Int

  // Relasi: Pengeluaran ini (opsional) terkait dengan armada mana
  armadaId    String?
  armada      Armada?  @relation(fields: [armadaId], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// Modul 2: Manajemen Transaksi
model Transaction {
  id                      String        @id @default(uuid())
  invoice_code            String        @unique
  customer_name           String
  customer_phone          String
  booking_date            DateTime      @db.Date
  checkout_datetime       DateTime      // Waktu mobil keluar
  checkin_datetime        DateTime      // Waktu mobil kembali
  
  // Data Keuangan
  all_in_rate             Int           // Tarif sewa
  overtime_rate_per_hour  Int
  fuel_cost               Int           // Biaya BBM (dicatat per transaksi)
  driver_fee              Int           // Biaya Gaji Sopir (dicatat per transaksi)
  payment_status          PaymentStatus @default(UNPAID)

  // --- Relasi (Foreign Keys) ---

  // Relasi: Transaksi ini (opsional) menggunakan paket apa
  packageId               String?
  package                 Package?      @relation(fields: [packageId], references: [id], onDelete: SetNull)

  // Relasi: Transaksi ini (wajib) menggunakan armada apa
  // onDelete: Restrict -> Mencegah armada dihapus jika masih punya riwayat transaksi
  armadaId                String
  armada                  Armada        @relation(fields: [armadaId], references: [id], onDelete: Restrict)

  // Relasi: Transaksi ini (wajib) menggunakan sopir siapa
  // onDelete: Restrict -> Mencegah sopir dihapus jika masih punya riwayat transaksi
  driverId                String
  driver                  Driver        @relation(fields: [driverId], references: [id], onDelete: Restrict)

  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt

  @@map("transactions")
}


